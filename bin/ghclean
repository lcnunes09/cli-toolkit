#!/bin/bash
# ghclean - Clean up merged Git branches locally and remotely

set -euo pipefail

PROTECTED_BRANCHES=("main" "master" "dev")

DRY_RUN=false
REMOTE_ONLY=false
CONFIRM=false
SHOW_HELP=false

LOCAL_DELETED=0
REMOTE_DELETED=0

# ── Parse CLI args ─────────────────────────────────────────────
for arg in "$@"; do
  case $arg in
    --dry-run) DRY_RUN=true ;;
    --remote-only) REMOTE_ONLY=true ;;
    --confirm) CONFIRM=true ;;
    --help|-h) SHOW_HELP=true ;;
  esac
done

if [[ "$SHOW_HELP" == true ]]; then
  echo ""
  echo "🧹 ghclean - Clean up merged Git branches locally and remotely"
  echo ""
  echo "Usage:"
  echo "  ghclean [options]"
  echo ""
  echo "Options:"
  echo "  --dry-run       Show what would be deleted without making changes"
  echo "  --remote-only   Only delete remote branches (keep local)"
  echo "  --confirm       Prompt before deleting each branch"
  echo "  --help, -h      Show this help message"
  echo ""
  echo "Examples:"
  echo "  ghclean                 Delete merged local and remote branches"
  echo "  ghclean --dry-run       Preview what would be deleted"
  echo "  ghclean --remote-only   Only clean up remote branches"
  echo "  ghclean --confirm       Confirm before each deletion"
  echo ""
  echo "Run this command while on a base branch like 'main' or 'dev'."
  echo ""
  exit 0
fi

# ── Validate current branch ─────────────────────────────────────
CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
echo "🔍 Active branch: $CURRENT_BRANCH"

if [[ ! " ${PROTECTED_BRANCHES[*]} " =~ " $CURRENT_BRANCH " ]]; then
  echo "🚫 You must run ghclean from a base branch like main, master, or dev."
  exit 1
fi

BASE_BRANCH="$CURRENT_BRANCH"
echo "📦 Using base branch: $BASE_BRANCH"
echo "📥 Fetching latest from origin..."
git fetch origin --prune > /dev/null

# ── Find merged branches ────────────────────────────────────────
echo "🔍 Searching for merged local branches..."
PATTERN="^($(IFS='|'; echo "${PROTECTED_BRANCHES[*]}"))$"
MERGED_BRANCHES=$(git branch --merged "$BASE_BRANCH" | sed 's/^[* ]*//' | grep -Ev "$PATTERN" || true)
TRIMMED_BRANCHES=$(echo "$MERGED_BRANCHES" | sed '/^\s*$/d')

if [[ -z "$TRIMMED_BRANCHES" ]]; then
  echo "✅ No merged local branches found. Everything is clean!"
  exit 0
fi

# ── Show summary ────────────────────────────────────────────────
echo ""
echo "🧼 Found merged branches:"
echo "$TRIMMED_BRANCHES"
echo ""

echo "🛠 Options:"
$DRY_RUN && echo "• 🧪 Dry-run mode enabled"
$REMOTE_ONLY && echo "• 🗑️ Remote-only mode enabled"
$CONFIRM && echo "• ✔️ Confirm-before-delete enabled"
echo ""

echo "🚀 Starting cleanup..."
echo ""

# ── Cleanup logic ───────────────────────────────────────────────
while read -r BRANCH; do
  [[ -z "${BRANCH// /}" ]] && continue

  if [[ "$CONFIRM" == true ]]; then
    read -p "❓ Delete '$BRANCH'? [y/N] " REPLY
    [[ "$REPLY" != "y" ]] && echo "↩️ Skipped $BRANCH" && continue
  fi

  if [[ "$DRY_RUN" == true ]]; then
    echo "🔍 Would delete: $BRANCH"
    continue
  fi

  if [[ "$REMOTE_ONLY" == false ]]; then
    echo "🧹 Deleting local branch: $BRANCH"
    git branch -D "$BRANCH"
    ((LOCAL_DELETED++))
  fi

  if git ls-remote --exit-code --heads origin "$BRANCH" > /dev/null 2>&1; then
    echo "🗑️ Deleting remote branch: $BRANCH"
    git push origin --delete "$BRANCH"
    ((REMOTE_DELETED++))
  else
    echo "📭 No matching remote branch for: $BRANCH"
  fi
done <<< "$TRIMMED_BRANCHES"

# ── Final Summary ───────────────────────────────────────────────
echo ""
echo "📊 Cleanup Summary:"
$DRY_RUN && echo "🧪 Dry run only — no branches actually deleted."
echo "🌿 Local branches deleted: $LOCAL_DELETED"
echo "☁️ Remote branches deleted: $REMOTE_DELETED"
echo ""
echo "✅ ghclean completed!"
