#!/bin/bash
# ghstatus - Show Git repo status at a glance

set -euo pipefail

VERBOSE=false
BASE_BRANCH=""
BASE_BRANCHES=("main" "master" "dev")

# ── Parse CLI Arguments ───────────────────────────────────
while [[ $# -gt 0 ]]; do
  case "$1" in
    --verbose|-v) VERBOSE=true ;;
    --base)
      shift
      BASE_BRANCH="${1:-}"
      if [[ -z "$BASE_BRANCH" ]]; then
        echo "❌ Missing value for --base"
        exit 1
      fi
      ;;
  esac
  shift
done

# ── Ensure inside a Git repo ──────────────────────────────
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo "🚫 Not inside a Git repository."
  exit 1
fi

CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
UNCOMMITTED=$(git status --porcelain)
UNPUSHED_LIST=$(git log --branches --not --remotes --oneline || true)
UNPUSHED_COUNT=$(echo "$UNPUSHED_LIST" | sed '/^\s*$/d' | wc -l | xargs)
REMOTE=$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)")

# ── Show warning if local main is behind ──────────────────
if [[ "$CURRENT_BRANCH" == "main" && -n "$REMOTE" ]]; then
  BEHIND_COUNT=$(git rev-list --left-right --count origin/main...main 2>/dev/null | awk '{print $2}')
  if [[ "$BEHIND_COUNT" -gt 0 ]]; then
    echo "⚠️  Your local main is behind origin/main by $BEHIND_COUNT commits. Consider pulling."
  fi
fi

# ── Decide target for unmerged comparison ─────────────────
TARGET_BRANCH="$BASE_BRANCH"
SHOW_UNMERGED=false

if [[ -n "$BASE_BRANCH" ]]; then
  SHOW_UNMERGED=true
elif [[ " ${BASE_BRANCHES[*]} " =~ " $CURRENT_BRANCH " ]]; then
  TARGET_BRANCH="$CURRENT_BRANCH"
  SHOW_UNMERGED=true
fi

# ── Unmerged branch logic ─────────────────────────────────
UNMERGED_LIST=""
UNMERGED_COUNT=0
UNMERGED_ARRAY=()

if [[ "$SHOW_UNMERGED" == true ]]; then
  ALL_BRANCHES=$(git for-each-ref --format='%(refname:short)' refs/heads/)
  FILTERED=$(echo "$ALL_BRANCHES" | grep -vE "^(${TARGET_BRANCH}|${BASE_BRANCHES[*]// /|})$" || true)

  while read -r BRANCH; do
    [[ -z "$BRANCH" ]] && continue
    if ! git merge-base --is-ancestor "$BRANCH" "$TARGET_BRANCH" 2>/dev/null; then
      UNMERGED_ARRAY+=("$BRANCH")
    fi
  done <<< "$FILTERED"

  UNMERGED_COUNT=${#UNMERGED_ARRAY[@]}
fi

# ── Output ────────────────────────────────────────────────
echo "🧭 Branch: $CURRENT_BRANCH"
echo "📌 Uncommitted changes: $( [ -z "$UNCOMMITTED" ] && echo "no" || echo "yes" )"
echo "⬆️  Unpushed commits: $UNPUSHED_COUNT"
echo "🔗 Remote tracking: ${REMOTE:-none}"

if [[ "$SHOW_UNMERGED" == true ]]; then
  echo "📦 Unmerged branches (into $TARGET_BRANCH): $UNMERGED_COUNT"
fi

if [[ "$VERBOSE" == true ]]; then
  echo ""
  echo "📄 Unpushed commits:"
  if [[ "$UNPUSHED_COUNT" -gt 0 ]]; then
    echo "$UNPUSHED_LIST"
  else
    echo "✔️ None"
  fi

  if [[ "$SHOW_UNMERGED" == true ]]; then
    echo ""
    echo "🌿 Unmerged branches into '$TARGET_BRANCH':"
    if [[ "$UNMERGED_COUNT" -gt 0 ]]; then
      for branch in "${UNMERGED_ARRAY[@]}"; do
        echo "$branch"
      done
    else
      echo "✔️ None"
    fi
  fi
fi

echo ""
echo "✅ ghstatus completed!"
